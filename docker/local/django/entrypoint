#!/bin/bash

set -o errexit # tells script to exit immediately if it fails with a non zero exit, preventing script from continuing to run if there is an error

set -o pipefail # considers fail if any of the commands in the pipeline fail, to ensure all commands in the pipeline are executed

set -o nounset # exit if any uninitialized variable is used

# -z checks if variable is empty
if [ -z "${POSTGRES_USER}" ]; then
    base_postgres_image_default_user='postgres'
    export POSTGRES_USER="${base_postgres_image_default_user}"
fi

export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"

python << END
import sys
import time
import psycopg2
suggest_unrecoverable_after = 30
start = time.time()
while True:
    try:
        psycopg2.connect(
            dbname="${POSTGRES_DB}",
            user="${POSTGRES_USER}",
            password="${POSTGRES_PASSWORD}",
            host="${POSTGRES_HOST}",
            port="${POSTGRES_PORT}"
        )
        break
    except psycopg2.OperationalError as error:
        sys.stderr.write("Waiting for PostgreSQL to become available ... \n")
        if time.time() - start > suggest_unrecoverable_after:
            sys.stderr.write("This is taking longer than expected. The following exveption may be the reason : '{}'\n".format(error))
    time.sleep(1)
END

>&2 echo "PostgreSQL is ready!!!!.....:-)"

exec "$@"